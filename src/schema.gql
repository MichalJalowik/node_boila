# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Employee dto"""
type Employee {
  id: ID!
  firstname: String!
  lastname: String!
  department: String!
  title: String!
  salary: Float!
  date_of_birth: DateTime!
  date_of_joining: DateTime!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type EmployeeDeleteResponse {
  id: ID
  firstname: String
  lastname: String
  department: String
  title: String
  salary: Float
  date_of_birth: DateTime
  date_of_joining: DateTime
  created_at: DateTime
  updated_at: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type EmployeeEdge {
  """The node containing the Employee"""
  node: Employee!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type EmployeeConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [EmployeeEdge!]!
}

type EmployeeAggregateGroupBy {
  id: ID
  firstname: String
  lastname: String
  department: String
  title: String
  salary: Float
  date_of_birth: DateTime
  date_of_joining: DateTime
}

type EmployeeCountAggregate {
  id: Int
  firstname: Int
  lastname: Int
  department: Int
  title: Int
  salary: Int
  date_of_birth: Int
  date_of_joining: Int
}

type EmployeeSumAggregate {
  id: Float
  salary: Float
}

type EmployeeAvgAggregate {
  id: Float
  salary: Float
}

type EmployeeMinAggregate {
  id: ID
  firstname: String
  lastname: String
  department: String
  title: String
  salary: Float
  date_of_birth: DateTime
  date_of_joining: DateTime
}

type EmployeeMaxAggregate {
  id: ID
  firstname: String
  lastname: String
  department: String
  title: String
  salary: Float
  date_of_birth: DateTime
  date_of_joining: DateTime
}

type Query {
  employee(
    """The id of the record to find."""
    id: ID!
  ): Employee
  employees(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: EmployeeFilter! = {}

    """Specify to sort results."""
    sorting: [EmployeeSort!]! = []
  ): EmployeeConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input EmployeeFilter {
  and: [EmployeeFilter!]
  or: [EmployeeFilter!]
  id: IDFilterComparison
  firstname: StringFieldComparison
  lastname: StringFieldComparison
  department: StringFieldComparison
  title: StringFieldComparison
  salary: NumberFieldComparison
  date_of_birth: DateFieldComparison
  date_of_joining: DateFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input EmployeeSort {
  field: EmployeeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EmployeeSortFields {
  id
  firstname
  lastname
  department
  title
  salary
  date_of_birth
  date_of_joining
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createOneEmployee(input: CreateOneEmployeeInput!): Employee!
  createManyEmployees(input: CreateManyEmployeesInput!): [Employee!]!
  updateOneEmployee(input: UpdateOneEmployeeInput!): Employee!
  updateManyEmployees(input: UpdateManyEmployeesInput!): UpdateManyResponse!
  deleteOneEmployee(input: DeleteOneEmployeeInput!): EmployeeDeleteResponse!
  deleteManyEmployees(input: DeleteManyEmployeesInput!): DeleteManyResponse!
}

input CreateOneEmployeeInput {
  """The record to create"""
  employee: CreateEmployee!
}

input CreateEmployee {
  id: ID
  firstname: String
  lastname: String
  department: String
  title: String
  salary: Float
  date_of_birth: DateTime
  date_of_joining: DateTime
  created_at: DateTime
  updated_at: DateTime
}

input CreateManyEmployeesInput {
  """Array of records to create"""
  employees: [CreateEmployee!]!
}

input UpdateOneEmployeeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEmployee!
}

input UpdateEmployee {
  id: ID
  firstname: String
  lastname: String
  department: String
  title: String
  salary: Float
  date_of_birth: DateTime
  date_of_joining: DateTime
  created_at: DateTime
  updated_at: DateTime
}

input UpdateManyEmployeesInput {
  """Filter used to find fields to update"""
  filter: EmployeeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateEmployee!
}

input EmployeeUpdateFilter {
  and: [EmployeeUpdateFilter!]
  or: [EmployeeUpdateFilter!]
  id: IDFilterComparison
  firstname: StringFieldComparison
  lastname: StringFieldComparison
  department: StringFieldComparison
  title: StringFieldComparison
  salary: NumberFieldComparison
  date_of_birth: DateFieldComparison
  date_of_joining: DateFieldComparison
}

input DeleteOneEmployeeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyEmployeesInput {
  """Filter to find records to delete"""
  filter: EmployeeDeleteFilter!
}

input EmployeeDeleteFilter {
  and: [EmployeeDeleteFilter!]
  or: [EmployeeDeleteFilter!]
  id: IDFilterComparison
  firstname: StringFieldComparison
  lastname: StringFieldComparison
  department: StringFieldComparison
  title: StringFieldComparison
  salary: NumberFieldComparison
  date_of_birth: DateFieldComparison
  date_of_joining: DateFieldComparison
}